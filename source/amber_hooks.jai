Amber_Hooks :: struct
{
	using callbacks : Extension_Callbacks;

	buffer_add_cursor_at_offset : (Buffer_ID, s64) -> bool;
	buffer_add_cursor_on_next_line : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_add_cursor_on_previous_line : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_clear : (Buffer_ID);
	buffer_clear_cursors : (Buffer_ID);
	buffer_clear_history : (Buffer_ID);
	buffer_clear_redo_history : (Buffer_ID);
	buffer_clear_selection : (Buffer_ID);
	buffer_close : (Buffer_ID);
	buffer_cursor_is_at_bol : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_cursor_is_at_eol : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_delete_selection : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_exists : (Buffer_ID) -> bool;
	buffer_get_codepoint : (Buffer_ID, s64) -> u32;
	buffer_get_count : (Buffer_ID) -> s64;
	buffer_get_cursor : (Buffer_ID, Buffer_Cursor_ID) -> Buffer_Cursor;
	buffer_insert_at_cursor : (Buffer_ID, u32, Buffer_Cursor_ID);
	buffer_merge_duplicate_cursors : (Buffer_ID);
	buffer_move_cursor_backward : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_forward : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_beginning : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_bol : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_end : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_eol : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_next_line : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_offset : (Buffer_ID, s64, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_previous_line : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_write_head_to_column : (Buffer_ID, s64, bool) -> bool;
	buffer_move_write_head_to_line_and_column : (Buffer_ID, s64, s64, bool) -> bool;
	buffer_move_write_head_to_line : (Buffer_ID, s64, bool) -> bool;
	buffer_open : (Split_ID, string) -> Buffer_ID;
	buffer_remove_cursor : (Buffer_ID, Buffer_Cursor_ID);
	buffer_set_text_layout : (Buffer_ID, Text_Layout_ID);
	buffer_skip_word_backward : (Buffer_ID, bool, Buffer_Cursor_ID, bool) -> bool;
	buffer_skip_word_forward : (Buffer_ID, bool, Buffer_Cursor_ID, bool) -> bool;
	create_framebuffer_and_texture : (u32, u32, s64) -> (u32, u32);
	create_shader : (string, string) -> u32;
	create_texture_from_file : (string, bool) -> u32;
	create_texture : (u32, u32, s64, *void, bool) -> u32;
	destroy_framebuffer : (u32);
	destroy_framebuffer_and_texture : (u32, u32);
	destroy_shader : (u32);
	destroy_texture : (u32);
	draw_circle : (Vec2 (T = f32), f32, RGBA, s64, Vec2 (T = f32), f32);
	draw_circle_outline : (Vec2 (T = f32), f32, RGBA, f32, s64, Vec2 (T = f32), f32);
	draw_get_clear_color : () -> RGBA;
	draw_get_clip_rect : () -> Rect (T = s32);
	draw_get_framebuffer : () -> u32;
	draw_get_shader : () -> u32;
	draw_get_texture : () -> u32;
	draw_get_viewport : () -> Rect (T = s32);
	draw_line : (Vec2 (T = f32), Vec2 (T = f32), RGBA, f32);
	draw_push_clip_rect : (Rect (T = s32)) -> Rect (T = s32);
	draw_rect : (Rect (T = f32), RGBA, f32, Rectangle_Corners, Rect (T = f32));
	draw_rect_outline : (Rect (T = f32), RGBA, f32, f32, Rectangle_Corners, Rect (T = f32));
	draw_reserve_vertices : (s64) -> *Vertex;
	draw_semi_circle : (Vec2 (T = f32), f32, f32, f32, RGBA, s64, Vec2 (T = f32), f32);
	draw_semi_circle_outline : (Vec2 (T = f32), f32, f32, f32, RGBA, f32, s64, Vec2 (T = f32), f32);
	draw_set_clear_color : (RGBA) -> RGBA;
	draw_set_clip_rect : (Rect (T = s32)) -> Rect (T = s32);
	draw_set_clipping : (bool) -> bool;
	draw_set_framebuffer : (u32) -> u32;
	draw_set_shader : (u32) -> u32;
	draw_set_texture : (u32) -> u32;
	draw_set_viewport : (Rect (T = s32)) -> Rect (T = s32);
	draw_text : (Font_ID, u32, Vec2 (T = f32), string, RGBA);
	draw_triangle_outline : (Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), RGBA, f32);
	draw_triangle : (Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), RGBA, Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32));
	font_exists : (Font_ID) -> bool;
	font_load_from_file : (string) -> (bool, Font_ID);
	get_active_split : () -> Split_ID;
	heap_allocator : (Allocator_Mode, s64, s64, *void, *void) -> *void;
	language_register : (Language) -> (bool, Language_ID);
	platform_close_file : (*void);
	platform_create_directory : (string) -> bool;
	platform_delete_directory : (string) -> bool;
	platform_delete_empty_directory : (string) -> bool;
	platform_delete_file : (string) -> bool;
	platform_file_exists : (string) -> bool;
	platform_free_library : (*void);
	platform_get_file_attributes : (string) -> (File_Attributes, bool);
	platform_get_file_cursor : (*void) -> s64;
	platform_get_key_state : (Key_Code) -> Key_State;
	platform_get_mod_state : () -> Mods;
	platform_get_mouse_button_state : (Mouse_Button) -> Key_State;
	platform_get_mouse_position : () -> Vec2 (T = f32);
	platform_get_proc_address : (*void, string) -> *void;
	platform_get_time : () -> f64;
	platform_get_viewport_size : () -> Vec2 (T = s32);
	platform_get_window_size : () -> Vec2 (T = s32);
	platform_get_working_directory : ((Allocator_Mode, s64, s64, *void, *void) -> *void, *void) -> string;
	platform_heap_alloc : (s64) -> *void;
	platform_heap_free : (*void);
	platform_heap_realloc : (*void, s64) -> *void;
	platform_is_window_focused : () -> bool;
	platform_list_files_in_directory : (string, (Allocator_Mode, s64, s64, *void, *void) -> *void, *void) -> (*File_Info, []File_Info);
	platform_load_library : (string) -> *void;
	platform_move_file : (string, string) -> bool;
	platform_open_error_box : (string, []Any);
	platform_open_file : (string, File_Open_Flags, File_Attributes) -> *void;
	platform_purge_directory : (string) -> bool;
	platform_read_entire_file : (string, (Allocator_Mode, s64, s64, *void, *void) -> *void, *void) -> (string, bool);
	platform_read_file : (*void, *void, s64) -> (s64, bool);
	platform_set_cursor : (Cursor_Type);
	platform_set_eof_to_cursor : (*void) -> bool;
	platform_set_file_attributes : (string, File_Attributes) -> bool;
	platform_set_file_cursor : (*void, s64, File_Cursor) -> (s64, bool);
	platform_set_working_directory : (string) -> bool;
	platform_sleep_milliseconds : (s64);
	platform_write_file : (*void, *void, s64) -> (s64, bool);
	platform_write_to_file : (string, string) -> (s64, bool);
	split_create_above : (Split_ID) -> Split_ID;
	split_create_below : (Split_ID) -> Split_ID;
	split_create_left : (Split_ID) -> Split_ID;
	split_create_right : (Split_ID) -> Split_ID;
	split_exists : (Split_ID) -> bool;
	split_get_active_buffer : (Split_ID) -> Buffer_ID;
	split_get_area : (Split_ID) -> Rect (T = f32);
	split_get_buffer_count : (Split_ID) -> s64;
	split_get_buffer : (Split_ID, s64) -> Buffer_ID;
	split_merge_above : (Split_ID);
	split_merge_below : (Split_ID);
	split_merge_left : (Split_ID);
	split_merge_right : (Split_ID);
	text_layout_compute : (Text_Layout_ID);
	text_layout_exists : (Text_Layout_ID) -> bool;
	text_layout_get_base_line : (Text_Layout_ID) -> s64;
	text_layout_get_closest_character : (Text_Layout_ID, Vec2 (T = f32)) -> s64;
	text_layout_get_line_range : (Text_Layout_ID, s64) -> Range (T = s64);
	text_layout_get_rect : (Text_Layout_ID, s64) -> Rect (T = f32);
	text_layout_get_visible_line_range : (Text_Layout_ID) -> Range (T = s64);
	text_layout_get_visible_range : (Text_Layout_ID) -> Range (T = s64);
}
