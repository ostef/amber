// This file was automatically generated.

Amber_Hooks :: struct #type_info_none
{
	using callbacks : Extension_Callbacks;
	HEAP : Allocator;

	amber_get_executable_path : (Allocator) -> string;
	amber_terminate : ();
	buffer_add_cursor_at_offset : (Buffer_ID, s64) -> bool;
	buffer_add_cursor_on_next_line : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_add_cursor_on_previous_line : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_backspace_selection : (Buffer_ID, Buffer_Cursor_ID, History_Buffering) -> bool;
	buffer_begin_batch_edit : (Buffer_ID);
	buffer_clear : (Buffer_ID);
	buffer_clear_cursors : (Buffer_ID);
	buffer_clear_history : (Buffer_ID);
	buffer_clear_redo_history : (Buffer_ID);
	buffer_clear_selection : (Buffer_ID);
	buffer_cursor_exists : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_cursor_is_at_bol : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_cursor_is_at_eol : (Buffer_ID, Buffer_Cursor_ID) -> bool;
	buffer_delete_selection : (Buffer_ID, Buffer_Cursor_ID, History_Buffering) -> bool;
	buffer_end_batch_edit : (Buffer_ID);
	buffer_exists : (Buffer_ID) -> bool;
	buffer_get_codepoint : (Buffer_ID, s64) -> u32;
	buffer_get_codepoint_no_abc : (Buffer_ID, s64) -> u32;
	buffer_get_count : (Buffer_ID) -> s64;
	buffer_get_cursor : (Buffer_ID, Buffer_Cursor_ID) -> Buffer_Cursor;
	buffer_get_cursor_column_index : (Buffer_ID, Buffer_Cursor_ID) -> s64;
	buffer_get_cursor_line_index : (Buffer_ID, Buffer_Cursor_ID) -> s64;
	buffer_get_eol_sequence : (Buffer_ID) -> EOL_Sequence;
	buffer_get_filename : (Buffer_ID, Allocator) -> string;
	buffer_get_language : (Buffer_ID) -> Language_ID;
	buffer_get_line_count : (Buffer_ID) -> s64;
	buffer_get_line_length : (Buffer_ID, s64) -> s64;
	buffer_get_name : (Buffer_ID, Allocator) -> string;
	buffer_get_split : (Buffer_ID) -> Split_ID;
	buffer_get_text_layout : (Buffer_ID) -> Text_Layout_ID;
	buffer_history_get_edit_count : (Buffer_ID) -> s64;
	buffer_history_get_undo_cursor : (Buffer_ID) -> s64;
	buffer_history_push_char : (Buffer_ID, u32);
	buffer_history_push_edit : (Buffer_ID, Buffer_Edit_Kind, Buffer_Cursor_ID) -> *Buffer_Edit;
	buffer_history_push_text : (Buffer_ID, []u32);
	buffer_insert_at_cursor : (Buffer_ID, u32, Buffer_Cursor_ID, History_Buffering);
	buffer_insert_text_at_cursor : (Buffer_ID, []u32, Buffer_Cursor_ID, History_Buffering);
	buffer_insert_utf8_text_at_cursor : (Buffer_ID, string, Buffer_Cursor_ID, History_Buffering);
	buffer_load_file : (Buffer_ID, string) -> bool;
	buffer_merge_duplicate_cursors : (Buffer_ID);
	buffer_move_cursor_backward : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_forward : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_beginning : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_bol : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_column : (Buffer_ID, s64, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_end : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_eol : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_line : (Buffer_ID, s64, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_line_and_column : (Buffer_ID, s64, s64, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_next_line : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_offset : (Buffer_ID, s64, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_cursor_to_previous_line : (Buffer_ID, Buffer_Cursor_ID, bool) -> bool;
	buffer_move_line_down : (Buffer_ID, Buffer_Cursor_ID, History_Buffering) -> bool;
	buffer_move_line_up : (Buffer_ID, Buffer_Cursor_ID, History_Buffering) -> bool;
	buffer_redo_last_edit : (Buffer_ID) -> bool;
	buffer_reload : (Buffer_ID) -> bool;
	buffer_remove_cursor : (Buffer_ID, Buffer_Cursor_ID);
	buffer_set_eol_sequence : (Buffer_ID, EOL_Sequence);
	buffer_set_filename : (Buffer_ID, string);
	buffer_set_language : (Buffer_ID, Language_ID);
	buffer_set_name : (Buffer_ID, string);
	buffer_skip_word_backward : (Buffer_ID, bool, Buffer_Cursor_ID, bool) -> bool;
	buffer_skip_word_forward : (Buffer_ID, bool, Buffer_Cursor_ID, bool) -> bool;
	buffer_sort_cursors_by_offset : (Buffer_ID);
	buffer_undo_last_edit : (Buffer_ID) -> bool;
	buffer_write_to_file : (Buffer_ID) -> bool;
	command_buffer_backspace : ();
	command_buffer_clear : ();
	command_buffer_delete : ();
	command_buffer_get_closest_character : (Vec2 (T = f32)) -> s64;
	command_buffer_get_count : () -> s64;
	command_buffer_get_cursor : () -> s64;
	command_buffer_get_rect : () -> Rect (T = f32);
	command_buffer_insert : (u32);
	command_buffer_move_cursor_backward : ();
	command_buffer_move_cursor_forward : ();
	command_buffer_set_cursor : (s64);
	command_buffer_set_prompt : (string);
	command_buffer_skip_word_backward : (bool);
	command_buffer_skip_word_forward : (bool);
	command_execute : ([]u32);
	command_execute_line : ();
	command_history_clear : ();
	command_register : (Extension_ID, Command_Info) -> bool;
	command_unregister_for_extension : (Extension_ID);
	create_framebuffer_and_texture : (u32, u32, s64) -> (u32, u32);
	create_shader : (string, string) -> u32;
	create_texture : (u32, u32, s64, *void, bool) -> u32;
	create_texture_from_file : (string, bool) -> u32;
	destroy_framebuffer : (u32);
	destroy_framebuffer_and_texture : (u32, u32);
	destroy_shader : (u32);
	destroy_texture : (u32);
	draw_circle : (Vec2 (T = f32), f32, RGBA, s64, Vec2 (T = f32), f32);
	draw_circle_outline : (Vec2 (T = f32), f32, RGBA, f32, s64, Vec2 (T = f32), f32);
	draw_get_clear_color : () -> RGBA;
	draw_get_clip_rect : () -> Rect (T = s32);
	draw_get_framebuffer : () -> u32;
	draw_get_shader : () -> u32;
	draw_get_texture : () -> u32;
	draw_get_viewport : () -> Rect (T = s32);
	draw_line : (Vec2 (T = f32), Vec2 (T = f32), RGBA, f32);
	draw_push_clip_rect : (Rect (T = s32)) -> Rect (T = s32);
	draw_quad : (Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), RGBA, Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32));
	draw_rect : (Rect (T = f32), RGBA, f32, Rectangle_Corners, Rect (T = f32));
	draw_rect_outline : (Rect (T = f32), RGBA, f32, f32, Rectangle_Corners, Rect (T = f32));
	draw_reserve_vertices : (s64) -> *Vertex;
	draw_semi_circle : (Vec2 (T = f32), f32, f32, f32, RGBA, s64, Vec2 (T = f32), f32);
	draw_semi_circle_outline : (Vec2 (T = f32), f32, f32, f32, RGBA, f32, s64, Vec2 (T = f32), f32);
	draw_set_clear_color : (RGBA) -> RGBA;
	draw_set_clip_rect : (Rect (T = s32)) -> Rect (T = s32);
	draw_set_clipping : (bool) -> bool;
	draw_set_framebuffer : (u32) -> u32;
	draw_set_shader : (u32) -> u32;
	draw_set_texture : (u32) -> u32;
	draw_set_viewport : (Rect (T = s32)) -> Rect (T = s32);
	draw_text : (Font_ID, u32, Vec2 (T = f32), string, RGBA);
	draw_triangle : (Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32), RGBA, Vec2 (T = f32), Vec2 (T = f32), Vec2 (T = f32));
	font_exists : (Font_ID) -> bool;
	font_get_line_height : (Font_ID, u32) -> f32;
	font_get_space_advance : (Font_ID, u32) -> f32;
	font_get_text_extents : (Font_ID, u32, string) -> Vec2 (T = f32);
	font_load_from_file : (string) -> (bool, Font_ID);
	get_active_buffer : () -> Buffer_ID;
	get_active_split : () -> Split_ID;
	get_active_text_layout : () -> Text_Layout_ID;
	get_buffer_count : () -> s64;
	get_split_count : () -> s64;
	get_text_layout_count : () -> s64;
	heap_allocator_proc : (Allocator_Mode, s64, s64, *void, *void) -> *void;
	language_detect : (string) -> Language_ID;
	language_exists : (Language_ID) -> bool;
	language_get_associated_file_extensions : (Language_ID, Allocator) -> []string;
	language_get_associated_filenames : (Language_ID, Allocator) -> []string;
	language_get_extension : (Language_ID) -> Extension_ID;
	language_get_name : (Language_ID, Allocator) -> string;
	language_register : (Language) -> (bool, Language_ID);
	language_unregister : (Language_ID);
	language_unregister_for_extension : (Extension_ID);
	platform_clear_clipboard : () -> bool;
	platform_close_file : (*void);
	platform_create_directory : (string) -> bool;
	platform_delete_directory : (string) -> bool;
	platform_delete_empty_directory : (string) -> bool;
	platform_delete_file : (string) -> bool;
	platform_file_exists : (string) -> bool;
	platform_free_library : (*void);
	platform_get_clipboard_text : (Allocator) -> string;
	platform_get_file_attributes : (string) -> (File_Attributes, bool);
	platform_get_file_cursor : (*void) -> s64;
	platform_get_full_filename : (string, Allocator) -> string;
	platform_get_key_state : (Key_Code) -> Key_State;
	platform_get_mod_state : () -> Mods;
	platform_get_module_filename : (Allocator) -> string;
	platform_get_mouse_button_state : (Mouse_Button) -> Key_State;
	platform_get_mouse_position : () -> Vec2 (T = f32);
	platform_get_proc_address : (*void, string) -> *void;
	platform_get_time : () -> f64;
	platform_get_viewport_size : () -> Vec2 (T = s32);
	platform_get_window_size : () -> Vec2 (T = s32);
	platform_get_working_directory : (Allocator) -> string;
	platform_heap_alloc : (s64) -> *void;
	platform_heap_free : (*void);
	platform_heap_realloc : (*void, s64) -> *void;
	platform_is_directory_watched : (string) -> bool;
	platform_is_file_watched : (string) -> bool;
	platform_is_key_down : (Key_Code) -> bool;
	platform_is_mouse_button_down : (Mouse_Button) -> bool;
	platform_is_window_focused : () -> bool;
	platform_list_files_in_directory : (string, Allocator) -> (*File_Info, []File_Info);
	platform_load_library : (string) -> *void;
	platform_move_file : (string, string) -> bool;
	platform_open_error_box : (string, []Any);
	platform_open_file : (string, File_Open_Flags, File_Attributes) -> *void;
	platform_pull_file_changes : () -> [..]File_Change;
	platform_purge_directory : (string) -> bool;
	platform_read_entire_file : (string, Allocator) -> (string, bool);
	platform_read_file : (*void, *void, s64) -> (s64, bool);
	platform_set_clipboard_text : (string) -> bool;
	platform_set_cursor : (Cursor_Type);
	platform_set_eof_to_cursor : (*void) -> bool;
	platform_set_file_attributes : (string, File_Attributes) -> bool;
	platform_set_file_cursor : (*void, s64, File_Cursor) -> (s64, bool);
	platform_set_working_directory : (string) -> bool;
	platform_sleep_milliseconds : (s64);
	platform_unwatch_directory : (string) -> bool;
	platform_unwatch_file : (string) -> bool;
	platform_watch_directory : (string) -> bool;
	platform_watch_file : (string) -> bool;
	platform_write_file : (*void, *void, s64) -> (s64, bool);
	platform_write_to_file : (string, string) -> (s64, bool);
	set_active_split : (Split_ID);
	split_close_buffer : (Split_ID, s64);
	split_create_above : (Split_ID) -> Split_ID;
	split_create_below : (Split_ID) -> Split_ID;
	split_create_first : () -> Split_ID;
	split_create_left : (Split_ID) -> Split_ID;
	split_create_right : (Split_ID) -> Split_ID;
	split_exists : (Split_ID) -> bool;
	split_get_active_buffer : (Split_ID) -> Buffer_ID;
	split_get_active_buffer_index : (Split_ID) -> s64;
	split_get_active_text_layout : (Split_ID) -> Text_Layout_ID;
	split_get_area : (Split_ID) -> Rect (T = f32);
	split_get_buffer : (Split_ID, s64) -> Buffer_ID;
	split_get_buffer_count : (Split_ID) -> s64;
	split_get_scrollbar_rect : (Split_ID) -> Rect (T = f32);
	split_get_tab_rect : (Split_ID, s64) -> Rect (T = f32);
	split_get_text_layout_area : (Split_ID) -> Rect (T = f32);
	split_merge : (Split_ID) -> Split_ID;
	split_open_buffer : (Split_ID) -> Buffer_ID;
	split_set_active_buffer : (Split_ID, s64);
	split_set_area : (Split_ID, Rect (T = f32));
	text_layout_clear : (Text_Layout_ID);
	text_layout_clear_colors : (Text_Layout_ID);
	text_layout_compute : (Text_Layout_ID);
	text_layout_exists : (Text_Layout_ID) -> bool;
	text_layout_get_area : (Text_Layout_ID) -> Rect (T = f32);
	text_layout_get_base_line : (Text_Layout_ID) -> s64;
	text_layout_get_buffer : (Text_Layout_ID) -> Buffer_ID;
	text_layout_get_closest_character : (Text_Layout_ID, Vec2 (T = f32)) -> s64;
	text_layout_get_column_width : (Text_Layout_ID) -> f32;
	text_layout_get_extents : (Text_Layout_ID) -> Vec2 (T = f32);
	text_layout_get_font : (Text_Layout_ID) -> Font_ID;
	text_layout_get_font_height : (Text_Layout_ID) -> u32;
	text_layout_get_line_height : (Text_Layout_ID) -> f32;
	text_layout_get_line_range : (Text_Layout_ID, s64) -> Range (T = s64);
	text_layout_get_max_scroll : (Text_Layout_ID) -> Vec2 (T = f32);
	text_layout_get_rect : (Text_Layout_ID, s64) -> Rect (T = f32);
	text_layout_get_relative_rect : (Text_Layout_ID, s64) -> Rect (T = f32);
	text_layout_get_scroll : (Text_Layout_ID) -> Vec2 (T = f32);
	text_layout_get_split : (Text_Layout_ID) -> Split_ID;
	text_layout_get_visible_line_range : (Text_Layout_ID) -> Range (T = s64);
	text_layout_get_visible_range : (Text_Layout_ID) -> Range (T = s64);
	text_layout_get_visual_scroll : (Text_Layout_ID) -> Vec2 (T = f32);
	text_layout_is_dirty : (Text_Layout_ID) -> bool;
	text_layout_push_color : (Text_Layout_ID, Range (T = s64), RGBA);
	text_layout_scroll_x : (Text_Layout_ID, f32);
	text_layout_scroll_y : (Text_Layout_ID, f32);
	text_layout_set_area : (Text_Layout_ID, Rect (T = f32));
	text_layout_set_dirty : (Text_Layout_ID);
	text_layout_set_font : (Text_Layout_ID, Font_ID);
	text_layout_set_font_height : (Text_Layout_ID, u32);
	text_layout_set_scroll : (Text_Layout_ID, Vec2 (T = f32));
	text_layout_set_scroll_x : (Text_Layout_ID, f32);
	text_layout_set_scroll_y : (Text_Layout_ID, f32);
	text_layout_set_visual_scroll : (Text_Layout_ID, Vec2 (T = f32));
	text_layout_update_area : (Text_Layout_ID);
	toggle_command_input : ();
}
